### Get all payments
GET {{HostAddress}}/payments
Accept: application/json, application/problem+json

> {%
    client.test("Request executed successfully. Empty list", function () {
        client.assert(response.status === 200, "Response status is 200");
        client.assert(response.contentType.mimeType === "application/json", "Response content type is application/json");
        client.assert(response.body instanceof Array, "Response body is an array");
        client.assert(response.body.length === 0, "Response body is empty");
    });
%}


### Pass invalid payment ID
GET {{HostAddress}}/payments?paymentId=5000
Accept: application/json, application/problem+json

> {%
    client.test("Request executed successfully. Out of range ID", function () {
        client.assert(response.status === 400, "Response status is 400");
        client.assert(response.contentType.mimeType === "application/problem+json", "Response content type is application/problem+json");
        client.assert(response.body instanceof Object, "Response body is an object");
        client.assert(response.body.status === 400, "Error code is 400");
        client.assert(response.body.errors.paymentId[0] === "The field paymentId must be between 1 and 1000.", "Error message is correct");
    });
%}


### Pass invalid valueDate
GET {{HostAddress}}/payments?valueDate=invalid-date
Accept: application/json, application/problem+json

> {%
    client.test("Request executed successfully. Invalid date format", function () {
        client.assert(response.status === 400, "Response status is 400");
        client.assert(response.contentType.mimeType === "application/problem+json", "Response content type is application/problem+json");
        client.assert(response.body instanceof Object, "Response body is an object");
        client.assert(response.body.status === 400, "Error code is 400");
        client.assert(response.body.errors.valueDate[0] === "The value 'invalid-date' is not valid for valueDate.", "Error message is correct");
    });
%}

### Pass invalid valueDate (wrong date)
GET {{HostAddress}}/payments?valueDate=2025-31-31
Accept: application/json, application/problem+json

> {%
    client.test("Request executed successfully. Invalid date format", function () {
        client.assert(response.status === 400, "Response status is 400");
        client.assert(response.contentType.mimeType === "application/problem+json", "Response content type is application/problem+json");
        client.assert(response.body instanceof Object, "Response body is an object");
        client.assert(response.body.status === 400, "Error code is 400");
        client.assert(response.body.errors.valueDate[0] === "The value 'invalid-date' is not valid for valueDate.", "Error message is correct");
    });
%}

